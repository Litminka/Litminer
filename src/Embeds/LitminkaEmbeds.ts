import { EmbedBuilder, Colors } from "discord.js";
import { client } from "../app";
import { AnimeAnnouncement, GroupType, WatchListWithAnime } from "../typings/anime";
import { ParseSeason, ParseMediaType } from "../utils/parsers";
import BaseEmbeds from "./baseEmbeds";
import { Guild, User } from "@prisma/client";
import { createFilledString } from "../utils/helpers";

export default class LitminkaEmbeds {

    public static async UserProfile(user: User): Promise<EmbedBuilder> {
        const embed = BaseEmbeds.Info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            .addFields([
                {
                    name: "**–ò–º—è**",
                    value: user.username,
                    inline: true
                },
                {
                    name: `**–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö**`,
                    value: user.isNotifiable ? `–î–∞` : `–ù–µ—Ç`
                },
                {
                    name: `**–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Litminka.ru**`,
                    value: user.litminkaId ? `–ï—Å—Ç—å (Id: ${user.litminkaId})` : `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`
                }
            ])
            .setThumbnail((await client.users.fetch(user.discordId)).avatarURL())

        return embed;
    }

    public static async GuildProfile(guild: Guild): Promise<EmbedBuilder> {
        const embed = BaseEmbeds.Info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
            .addFields([
                {
                    name: "**–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ**",
                    value: guild.name,
                    inline: true
                },
                {
                    name: `**–£–≤–µ–¥–æ–º–ª—è—Ç—å –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–∏—è—Ö**`,
                    value: guild.isNotifiable ? `–î–∞` : `–ù–µ—Ç`
                }
            ])
            .setThumbnail(guild.icon || (await client.guilds.cache.get(guild.guildId)).iconURL())
        if (guild.isNotifiable)
            embed.addFields([
                {
                    name: `**–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**`,
                    value: guild.notifyChannelId ? `<#${guild.notifyChannelId}>` : `–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`
                }
            ])
        return embed;
    }

    public static AnimeRelease(announcement: AnimeAnnouncement): EmbedBuilder {
        let animeURL = `https://litminka.ru/anime/${announcement.slug}?`;
        if (announcement.episode != null) animeURL += `episode=${announcement.episode}&`;
        if (announcement.groupName != null) animeURL += `translation=${announcement.groupName}&`;
        const embed = BaseEmbeds.Anime(`–ê–Ω–∏–º–µ –Ω–∞—á–∞–ª–æ –≤—ã—Ö–æ–¥–∏—Ç—å!`)
            .setDescription(`**${announcement.animeName}**`);
        if (/^https?:\/\//.test(announcement.image)) embed.setImage(announcement.image);
        if (/^https?:\/\//.test(animeURL)) embed.setURL(animeURL);
        return embed;
    }

    public static NewEpisode(announcement: AnimeAnnouncement): EmbedBuilder {
        const embed = LitminkaEmbeds.AnimeRelease(announcement)
            .setTitle(`–í—ã—à–ª–∞ –Ω–æ–≤–∞—è —Å–µ—Ä–∏—è!`)
            .addFields([
                {
                    name: "**–≠–ø–∏–∑–æ–¥**",
                    value: `${announcement.episode} / ${announcement.maxEpisodes ? announcement.maxEpisodes : `?`}`,
                    inline: true
                },
                {
                    name: `**${announcement.groupType === GroupType.Voice ? `–û–∑–≤—É—á–∫–∞` : `–°—É–±—Ç–∏—Ç—Ä—ã`}**`,
                    value: `${announcement.groupName}`,
                    inline: true
                },
            ])

        return embed;
    }
    public static FinalEpisode(announcement: AnimeAnnouncement): EmbedBuilder {
        const embed = LitminkaEmbeds.NewEpisode(announcement)
            .setTitle(`–í—ã—à–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–µ—Ä–∏—è!`)
            .setColor(Colors.Gold)
        return embed;
    }

    public static ShowWatchlist(list: WatchListWithAnime[]): EmbedBuilder[] {
        const embeds = [];
        for (let anime of list) {
            embeds.push(LitminkaEmbeds.AnimeInfo(anime));
        }
        return embeds;
    }

    public static AnimeInfo(record: WatchListWithAnime) {
        const { isFavorite, rating, status, watchedEpisodes, anime } = record;
        const animeURL = `https://litminka.ru/anime/${anime.slug}`;
        const animeStatus = {
            planned: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
            watching: '–°–º–æ—Ç—Ä—é',
            rewatching: '–ü–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞—é',
            completed: '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ',
            on_hold: '–û—Ç–ª–æ–∂–µ–Ω–æ',
            dropped: '–ë—Ä–æ—à–µ–Ω–æ',
        }
        //let title = createFilledString(anime.name);
        const embed = BaseEmbeds.Anime(`${anime.name}`)
            .addFields([
                {
                    name: `**${animeStatus[status]}**`,
                    value: `${watchedEpisodes} / ${anime.maxEpisodes ? anime.maxEpisodes : `?`}`,
                    inline: true,
                },
                {
                    name: `**–†–µ–π—Ç–∏–Ω–≥**`,
                    value: `${rating} / 10`,
                    inline: true
                },
                {
                    name: `${isFavorite ? `‚ù§Ô∏è` : `ü§ç`}`,
                    value: ` `,
                    inline: true,
                },
                {
                    name: `**–°–µ–∑–æ–Ω –≤—ã–ø—É—Å–∫–∞**`,
                    value: ParseSeason(anime.season),
                    inline: true
                },
                {
                    name: `**–¢–∏–ø**`,
                    value: ParseMediaType(anime.mediaType),
                    inline: true
                }
            ])
        if (/^https?:\/\//.test(anime.image)) embed.setThumbnail(anime.image);
        if (/^https?:\/\//.test(animeURL)) embed.setURL(animeURL);

        return embed
    }
}